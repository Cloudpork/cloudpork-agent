name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        binary_name="cloudpork${{ matrix.ext }}"
        go build -ldflags "-s -w -X main.version=${GITHUB_REF#refs/tags/}" -o $binary_name .
        
        # Create archive
        archive_name="cloudpork_${GITHUB_REF#refs/tags/v}_${{ matrix.os }}_${{ matrix.arch }}"
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip "${archive_name}.zip" $binary_name
        else
          tar -czf "${archive_name}.tar.gz" $binary_name
        fi
        
        # Set outputs
        echo "archive_name=${archive_name}" >> $GITHUB_OUTPUT
        echo "binary_name=${binary_name}" >> $GITHUB_OUTPUT
      id: build
    
    - name: Upload Release Asset
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.build.outputs.archive_name }}
        path: ${{ steps.build.outputs.archive_name }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          **/*.tar.gz
          **/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}